[build-system]
requires = [
    "pip>=20.0",
    "setuptools>=40.0",
    "setuptools_scm[toml]>=4.0,<8",
    "wheel"
]
build-backend = "setuptools.build_meta"


[tool.coverage.run]
source = ["grafana_client"]

[tool.coverage.report]
show_missing = true
fail_under = 0
omit = [
    "test/*",
]

[tool.ruff]
line-length = 120
extend-exclude = [
  "grafana_client/elements/__init__.py",
  "grafana_client/elements/_async/__init__.py",
]

[tool.ruff.lint]
select = [
    # Bandit
    "S",
    # eradicate
    "ERA",
    # flake8-2020
    "YTT",
    # isort
    "I",
    # print
    "T20",
    # Pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # return
    "RET",
    # pyupgrade
    # "UP",
    # flake8-commas
    "COM",
    # future-annotations
    # "FA",
    # flake8-type-checking
    "TCH",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH"
]
extend-ignore = [
    # Unnecessary `elif` after `return` or `raise` statement.
    "RET505",
    "RET506",
    # No trailing commas.
    "COM812"
]
unfixable = ["ERA", "F401", "F841", "T20", "ERA001"]

[tool.ruff.lint.per-file-ignores]
"examples/*" = ["ERA001", "T201"]
"script/*" = ["S603", "S605", "S607", "T201"]
"grafana_client/knowledge.py" = ["ERA001"]


# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]
format = [
  {cmd="script/generate_async.py format"},
  {cmd="ruff format"},
  {cmd="ruff check --fix"},
]
lint = [
  {cmd="script/generate_async.py check"},
  {cmd="ruff check"},
]
test = [
  {cmd="python -m unittest -vvv"},
]
test-coverage = [
  {cmd="coverage run -m unittest discover -vvv"},
  {cmd="coverage xml"},
  {cmd="coverage report"},
]
build = {cmd="python -m build"}
check = ["lint", "test"]
